About
=====

`purest` is a simple implementation of a WSGI application geared towards easy
implementation of REST based applications. Each REST application implements a
concrete strategy by mapping URI paths and HTTP methods to callables. It does
basicaly two things:

1) For each incoming HTTP request serialize the WSGI environment and call the
   :py:meth:`URIHandler.parse` callable. This method parses the path and
   determines the right application handler.
2) A mechanism for applications to register url+method to handler mappings.
   Applications should export a list of dictionaries containing a triple of
   URI, http method and the callable as endpoint. The
   :py:meth:`URIHandler.map` method rebuilds an internal :py:class:`Map`
   objects, that is a list of these tripels.

License
=======

This software is under the GPLv3 license. See the file `License` that comes
with this distribution for a copy of it.

Install
=======

But you can try it the following way on your laptop::

    $ sudo apt-get install couchdb collectd-core
    $ couchdb                                       # -> runs in foreground
    $ sudo pip install gunicorn
    $ git clone git://github.com/crito/purest.git
    $ cd purest
    $ python2.7 setup.py install

Start the wsgi application::

    $ gunicorn --debug -b 127.0.0.1:9797 purest.core:WSGI

This is a minimal config file for collectd::

    FQDNLookup true
    Interval 30
    LoadPlugin syslog

    <Plugin syslog>
            LogLevel info
    </Plugin>

    LoadPlugin battery
    LoadPlugin cpu
    LoadPlugin df
    LoadPlugin disk
    LoadPlugin entropy
    LoadPlugin interface
    LoadPlugin irq
    LoadPlugin load
    LoadPlugin memory
    LoadPlugin processes
    LoadPlugin rrdtool
    LoadPlugin swap
    LoadPlugin users
    LoadPlugin write_http

    <Plugin "write_http">
      <URL "http://127.0.0.1:9797/collectd/data">
         Format "JSON"
         #User "collectd"
         #Password "weCh3ik0"
      </URL>
    </Plugin>

    <Plugin disk>
            Disk "/sda[1-9]/"
    </Plugin>

Run the collectd daemon::

    $ sudo collectd -C /etc/collectd/collectd.conf -f
    
Thats it. It should start to fill the db with documents. Each collection is
stored in a seperate database. Each collection is identified by the following
five parts::

    hostname-plugin-plugin_instance-type-type_instance

    eg: fenix_30loops_net-df--df-boot  

        fenix_30loops_net   ==> Hostname
        df                  ==> Plugin
                            ==> Plugin Instance (If not set, it stays empty
        df                  ==> Type
        boot                ==> Type Instance

With the creation of each database a basic catch all view is added alongside::

    curl -X GET http://127.0.0.1:5984/fenix_30loops_net-df--df-boot/_design/basic/_view/all 

The `startkey` and `endkey` parameters can be aplied to the URI. See the
couchdb documentation for more information.

URI Strategies
==============

Currently there are 2 strategies implemented:

#) **collectd** - Collectd can post its values as json messages
#) **metrics** - Retrieve collections as key/value tables.

URI's
=====

:: 

    POST /collectd/data/  -> Parse a list of collected values and store them in the
                             backend
    GET /metrics/all_dbs/ -> Retrieve the collection structure in a
                             hierarchical JSON object
    GET /metrics/<host>/<plugin>/<plugin_instance>/<type>/<type_instance>/
                          -> Retrieve a specific collection. Return type can
                             also be a list of collections. If a part of the
                             URI is replaced with a '-', all sub nodes of its
                             parent node are added to the return list. 


    [crito@fenix.30loops.net:~] (0) % curl -X GET http://127.0.0.1:9797/metrics/all_dbs 
    {"fenix.30loops.net": 
         "processes": 
            {"-": 
                {"fork_rate": 
                    {"-": []}, 
                 "ps_state": 
                    {"running": [], "sleeping": [], "paging": [], "stopped": [], "zombies": [], "blocked": []}
                 }
            }, 
         "memory": 
            {"-": 
                {"memory": 
                    {"cached": [], "buffered": [], "used": [], "free": []}
                }
            }, 
         "interface": 
            {"-": 
                {"if_packets": 
                    {"lo": [], "pan0": [], "irda0": [], "wlan0": [], "eth0": []}, 
                 "if_errors": 
                    {"lo": [], "pan0": [], "irda0": [], "wlan0": [], "eth0": []}, 
                 "if_octets": 
                    {"lo": [], "pan0": [], "irda0": [], "wlan0": [], "eth0": []}
                }
            }, 
         "disk": 
            {"sda5": 
                {"disk_merged": 
                    {"-": []}, 
                 "disk_ops": 
                    {"-": []}, 
                 "disk_time": 
                    {"-": []}, 
                 "disk_octets": 
                    {"-": []}
                }, 
             }, 
          "cpu": 
            {"1": 
                {"cpu": 
                    {"softirq": [], "system": [], "idle": [], "user": [], "interrupt": [], "nice": [], "steal": [], "wait": []}
                }, 
             "0": 
                {"cpu": 
                    {"softirq": [], "system": [], "idle": [], "user": [], "interrupt": [], "wait": [], "steal": [], "nice": []}
                }
            }
        }
    }
